import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import ContextTypes
from user_models import UserModel
from hh import HHApi
from config import base_config
from message_builders import (
    build_main_menu,
    build_settings_menu,
    build_main_menu_back_button,
    build_settings_back_button,
    display_about_message,
    display_current_settings_message,
    display_resume_selection_message,
    generate_cover_letter,
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_SET_KEYWORDS = 1
STATE_SET_COVER_LETTER = 2
STATE_ENTERING_PHONE = 3

async def update_message_in_task(query: CallbackQuery, text: str, reply_markup: InlineKeyboardMarkup = None, parse_mode=None, disable_web_page_preview=None) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π."""
    asyncio.create_task(query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode=parse_mode,
        disable_web_page_preview=disable_web_page_preview
    ))
    await asyncio.sleep(0)


async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    chat_id = update.message.chat_id
    user = UserModel(chat_id)
    await user.load()
    auth_token_exists = "auth_token" in user.config
    reply_markup = build_main_menu(auth_token_exists)
    await update.message.reply_text(
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ HH. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è* –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º –∏ –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏.",
        reply_markup=reply_markup
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö."""
    query = update.callback_query
    chat_id = query.message.chat_id
    user = UserModel(chat_id)
    await user.load()
    auth_token = user.get("auth_token")

    data = query.data

    if data == 'about_us':
        await update_message_in_task(query, *display_about_message(), disable_web_page_preview=True, parse_mode="Markdown")
    elif data == 'authorize':
        await handle_authorization_process(query, user)
    elif data == 'check_authorization':
        await check_authorization_status(query, user)
    elif data == 'start_vacancy_responses':
        asyncio.create_task(process_vacancy_responses(query, context, user))
        await asyncio.sleep(0)
    elif data == 'view_settings':
        await update_message_in_task(query, *display_current_settings_message(user))
    elif data == 'settings':
        await update_message_in_task(query, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª–∏–∫–∞:", build_settings_menu())
    elif data == 'select_resume':
        asyncio.create_task(display_resume_selection_message(query, user))
        await asyncio.sleep(0)
    elif data.startswith('select_resume_'):
        await select_resume(query, data, user)
    elif data == 'set_keywords':
        await set_keywords(query, context)
    elif data == 'set_cover_letter':
        await set_cover_letter(query, context)
    elif data == 'main_menu':
        await go_to_main_menu(query, auth_token)
    await query.answer()

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = update.message.chat_id
    state = context.user_data.get('state')
    user = UserModel(chat_id)
    await user.load()

    if state == STATE_SET_KEYWORDS:
        keywords = update.message.text
        user.set('keywords', keywords)
        await user.save()
        await reset_state_with_message(update, context, "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    elif state == STATE_SET_COVER_LETTER:
        cover_letter = update.message.text
        user.set('cover_letter_template', cover_letter)
        await user.save()
        await reset_state_with_message(update, context, "‚úÖ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏

async def handle_authorization_process(query: CallbackQuery, user: UserModel):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    auth_url = base_config.getAuthUrl(user.chat_id)
    await update_message_in_task(
        query,
        'üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ.',
        InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", url=auth_url)],
            [InlineKeyboardButton("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å?", callback_data='check_authorization')],
        ])
    )

async def check_authorization_status(query: CallbackQuery, user: UserModel):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    auth_token = user.get("auth_token")
    if not auth_token:
        await user.load(use_cache=False)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ –∫—ç—à–∞
        auth_token = user.get("auth_token")
    if auth_token:
        await query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
        reply_markup = build_main_menu(auth_token_exists=True)
        await update_message_in_task(
            query,
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
            reply_markup
        )
    else:
        auth_url = base_config.getAuthUrl(user.chat_id)
        await update_message_in_task(
            query,
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
            InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", url=auth_url)],
                [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å?", callback_data='check_authorization')],
            ])
        )

async def process_vacancy_responses(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, user: UserModel):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏."""


    auth_token = user.get("auth_token")
    resume_id = user.get("resume_id")
    keywords = user.get('keywords')
    cover_letter_template = user.get('cover_letter_template')
    subscription_level = user.get('subscription_level')

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(
        begin_vacancy_responses(
            query,
            context,
            auth_token=auth_token,
            resume_id=resume_id,
            keywords=keywords,
            cover_letter_template=cover_letter_template,
        )
    )
    await asyncio.sleep(0)


async def select_resume(query: CallbackQuery, data: str, user: UserModel):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞."""
    resume_id = data.split('_')[-1]
    user.set('resume_id', resume_id)
    await user.save()
    await update_message_in_task(
        query,
        "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤.\n\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª–∏–∫–∞:",
        build_settings_menu()
    )

async def set_keywords(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
    await update_message_in_task(
        query,
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω').\n\n"
        "üìñ [–û–ø–∏—Å–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤](https://hh.kz/article/1175)",
        build_settings_back_button(),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    context.user_data['state'] = STATE_SET_KEYWORDS

async def set_cover_letter(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    await update_message_in_task(
        query,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã:\n"
        "{company_name} ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "{vacancy_name} ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–í–≤–æ–¥: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {company_name}! –Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_name}.'\n"
        "–í—ã–≤–æ–¥: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, Google! –Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.'",
        build_settings_back_button()
    )
    context.user_data['state'] = STATE_SET_COVER_LETTER

async def go_to_main_menu(query: CallbackQuery, auth_token):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    reply_markup = build_main_menu(auth_token_exists=auth_token is not None)
    await update_message_in_task(
        query,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        reply_markup
    )



async def reset_state_with_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    reply_markup = build_settings_menu()
    await update.message.reply_text(f"{text}\n\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª–∏–∫–∞:", reply_markup=reply_markup)
    context.user_data['state'] = None



async def begin_vacancy_responses(
    query: CallbackQuery,
    context: ContextTypes.DEFAULT_TYPE,
    auth_token,
    resume_id,
    keywords,
    cover_letter_template,
) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    missing_parameters = []
    if not resume_id:
        missing_parameters.append("üìÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ")
    if not keywords:
        missing_parameters.append("üîç –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    if not cover_letter_template:
        missing_parameters.append("‚úâÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")

    if missing_parameters:
        buttons = []
        if not resume_id:
            buttons.append([InlineKeyboardButton("üìÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data='select_resume')])
        if not keywords:
            buttons.append([InlineKeyboardButton("üîç –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", callback_data='set_keywords')])
        if not cover_letter_template:
            buttons.append([InlineKeyboardButton("‚úâÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data='set_cover_letter')])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(buttons)
        await update_message_in_task(
            query,
            "‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" +
            "\n".join(missing_parameters) +
            "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup
        )
        return False

    hhApi = HHApi(auth_token)
    success_counter = 0
    is_vacancies_ended = False
    total_counter = 0
    successful_responses_counter = 0
    try:
        await update_message_in_task(query, "üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...")
        remaining_responses, next_available_time = await hhApi.count_remaining_responses()
        is_today_limit = remaining_responses <= 0
        if is_today_limit:
            await update_message_in_task(
                query,
                f"‚õî –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ üôÅ\n\n–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {next_available_time}.",
                build_main_menu_back_button()
            )
            return False
        await update_message_in_task(
            query,
            f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ {remaining_responses} –æ—Ç–∫–ª–∏–∫–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è..."
        )
        page = 0
        while not is_today_limit and not is_vacancies_ended:
            try:
                vacancies_list = await hhApi.get_vacancies(keywords, page=page)
                if not vacancies_list:
                    is_vacancies_ended = True
                    break
                page += 1
                for vacancy in vacancies_list:
                    try:
                        if vacancy.get('has_test', False):
                            await hhApi.add_vacancy_to_blacklist(vacancy['id'])
                            continue
                        if vacancy.get('relations') and len(vacancy['relations']) > 0:
                            continue
                        total_counter += 1
                        cover_letter = generate_cover_letter(vacancy['employer']['name'], vacancy['name'], cover_letter_template)
                        status = await hhApi.respond_to_vacancy(
                            vacancy_id=vacancy['id'],
                            resume_id=resume_id,
                            cover_letter=cover_letter
                        )
                        if status == 'today_limit':
                            is_today_limit = True
                            break
                        elif status == 'success':
                            success_counter += 1
                            successful_responses_counter += 1
                        new_status_text = f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π...\n–û—Ç–∫–ª–∏–∫–æ–≤: {success_counter} / {remaining_responses}"
                        if successful_responses_counter >= 4:
                            try:
                                await update_message_in_task(query, new_status_text)
                                successful_responses_counter = 0
                            except Exception as edit_error:
                                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                                continue
                        if success_counter >= remaining_responses:
                            is_today_limit = True
                            break
                    except Exception as edit_error:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: {edit_error}")
                        continue
            except Exception as edit_error:
                print(edit_error, 'error in vacancies processing')
        if success_counter >= 1:
            base_message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_counter} –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ {remaining_responses}."
            reply_markup = build_main_menu_back_button()
            if is_vacancies_ended:
                base_message = (
                    f"üîç‚ùå –£–ø—Å... –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: *{keywords}* –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n"
                    f"‚úÖ –û–¥–Ω–∞–∫–æ —É–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {success_counter} –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ {remaining_responses}."
                )
            await update_message_in_task(
                query,
                base_message,
                reply_markup
            )
            return True
        elif is_vacancies_ended:
            await update_message_in_task(
                query,
                f"üîç‚ùå –£–ø—Å... –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: *{keywords}* –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                build_main_menu_back_button()
            )
            return False
    except Exception as e:
        print(e, 'error in begin_vacancy_responses')
        await update_message_in_task(
            query,
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
            build_main_menu_back_button()
        )
