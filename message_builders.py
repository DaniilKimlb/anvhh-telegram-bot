from telegram import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from user_models import UserModel
from hh import HHApi

def build_main_menu(auth_token_exists: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if auth_token_exists:
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data='start_vacancy_responses')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª–∏–∫–∞", callback_data='settings')],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data='about_us')],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data='authorize')],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data='about_us')],
        ]
    return InlineKeyboardMarkup(keyboard)


def build_settings_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    keyboard = [
        [InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤", callback_data='select_resume')],
        [InlineKeyboardButton("üîç –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data='set_keywords')],
        [InlineKeyboardButton("üíå –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data='set_cover_letter')],
        [InlineKeyboardButton("üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='view_settings')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)

def build_main_menu_back_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])

def build_settings_back_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings')]])


def build_owner_payment_status_menu(chat_id: int, subscription_level: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏–ª —Å—á–µ—Ç", callback_data=f'issue_invoice_{chat_id}')],
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'confirm_payment_{chat_id}_{subscription_level}')],
    ])

def display_about_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–û –Ω–∞—Å'."""
    about_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ANVHH!\n\n"
        "–ú—ã ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ HeadHunter. "
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –æ—Ç–∫–ª–∏–∫–æ–≤, —ç–∫–æ–Ω–æ–º—å—Ç–µ –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö!\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
        "‚Äî üìÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "‚Äî üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π\n"
        "‚Äî üíå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º\n"
        "‚Äî üóì –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫\n"
        "‚Äî üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. "
        "–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª—è—Ö.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è *–æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º* (open-source), –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–∏. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥, –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub: "
        "[anvhh-telegram-bot](https://github.com/DaniilKimlb/anvhh-telegram-bot/issues).\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç: @scrscrq."
    )
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])
    return about_message, reply_markup


def display_current_settings_message(user: UserModel):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    settings_message = "üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞*:\n\n"
    settings_message += f"üìÑ *ID —Ä–µ–∑—é–º–µ*: {user.get('resume_id', '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
    settings_message += f"üîç *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞*: {user.get('keywords', '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')}\n"
    settings_message += f"üíå *–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ*: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if user.get('cover_letter_template') else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings')]])
    return settings_message, reply_markup

async def display_resume_selection_message(query: CallbackQuery, user: UserModel):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤."""
    auth_token = user.get("auth_token")
    hh_api = HHApi(auth_token)
    resume_list = await hh_api.get_resumes()

    if not resume_list:
        await query.edit_message_text("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    message_text = "–í–∞—à–∏ —Ä–µ–∑—é–º–µ:\n\n"
    buttons = []

    for index, resume in enumerate(resume_list):
        title = resume['title']
        resume_id = resume['id']
        message_text += f"{index + 1}. [{title}](https://hh.kz/resume/{resume_id})\n"
        buttons.append([InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ {index + 1}", callback_data=f"select_resume_{resume_id}")])

    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings')])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(message_text, parse_mode='Markdown', reply_markup=reply_markup)

def generate_cover_letter(company_name, vacancy_name, template):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞."""
    return template.format(company_name=company_name, vacancy_name=vacancy_name).replace('\\n', '\n').strip()
